nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
colummean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
colummean(airquality)
colummean <- function(y, removeNA = TRUE){
meuNC <- ncol()
means <- numeric(meuNC)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colummean(airquality)
colummean <- function(y, removeNA = TRUE){
nc <- ncol()
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colummean(airquality)
colummean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
colummean(airquality)
library("swirl")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
1
2
0
back()
info()
main()
nxt()
infor()
info()
skip()
exit
swril()
exit
exit
load("D:/R/Swirl/specdata/.RData")
load("D:/R/Swirl/specdata/.RData")
submit()
load("D:/R/Swirl/specdata/.RData")
load("D:/R/Swirl/specdata/.RData")
submit <- local({
getOutput <- function(sid) {
## JUST FOR TESTING
## sid <- sub("-dev", "", sid, fixed = TRUE)
if(sid == "pollutantmean-1") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
}
else if(sid == "pollutantmean-2") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
}
else if(sid == "pollutantmean-3") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 34)
}
else if(sid == "pollutantmean-4") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate")
}
else if(sid == "complete-1") {
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
paste(cc$nobs, collapse = "\n")
}
else if(sid == "complete-2") {
source("complete.R")
cc <- complete("specdata", 54)
cc$nobs
}
else if(sid == "complete-3") {
source("complete.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
paste(cc[use, "nobs"], collapse = "\n")
}
else if(sid == "corr-1") {
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
}
else if(sid == "corr-2") {
source("corr.R")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
paste(out, collapse = "\n")
}
else if(sid == "corr-3") {
source("corr.R")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
}
else {
stop("invalid part number")
}
}
partPrompt <- function() {
partlist <- list("pollutantmean-1" = "'pollutantmean' part 1",
"pollutantmean-2" = "'pollutantmean' part 2",
"pollutantmean-3" = "'pollutantmean' part 3",
"pollutantmean-4" = "'pollutantmean' part 4",
"complete-1" = "'complete' part 1",
"complete-2" = "'complete' part 2",
"complete-3" = "'complete' part 3",
"corr-1" = "'corr' part 1",
"corr-2" = "'corr' part 2",
"corr-3" = "'corr' part 3"
)
pretty_out("Which part are you submitting?")
part <- select.list(partlist, graphics=FALSE)
names(part)
}
getChallenge <- function(email, challenge.url) {
params <- list(email_address = email,
response_encoding = "delim")
result <- getForm(challenge.url, .params = params)
s <- strsplit(result, "|", fixed = TRUE)[[1]]
list(ch.key = s[5], state = s[7])
}
challengeResponse <- function(password, ch.key) {
x <- paste(ch.key, password, sep = "")
digest(x, algo = "sha1", serialize = FALSE)
}
submitSolution <- function(email, ch.resp, sid, output, signature, submit.url,
src = "", http.version = NULL) {
output <- as.character(base64(output))
src <- as.character(base64(src))
params <- list(assignment_part_sid = sid,
email_address = email,
submission = output,
submission_aux = src,
challenge_response = ch.resp,
state = signature)
params <- lapply(params, URLencode)
result <- postForm(submit.url, .params = params)
s <- strsplit(result, "\\r\\n")[[1]]
tail(s, 1)
}
get_courseid <- function() {
pretty_out("The first item I need is your Course ID. For example, if the",
"homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).", skip_after=TRUE)
repeat {
courseid <- readline("Course ID: ")
## Remove quotes if there are any
courseid <- gsub("\'|\"", "", courseid)
## Set up test cases
is_url <- str_detect(courseid, "www[.]|http:|https:")
is_numbers <- str_detect(courseid, "^[0-9]+$")
is_example <- str_detect(courseid, fixed("rprog-001"))
## Check if courseid is none of the bad things
if(!any(is_url, is_numbers, is_example)){
break
## courseid is one of the bad things
} else {
## Check if courseid is a url
if(is_url) {
pretty_out("It looks like you entered a web address, which is not what I'm",
"looking for.")
}
## Check if courseid is all numbers
if(is_numbers) {
pretty_out("It looks like you entered a numeric ID, which is not what I'm",
"looking for.")
}
## Check if the user stole the example courseid
if(is_example) {
pretty_out("It looks like you entered the Course ID that I used as an",
"example, which is not what I'm looking for.")
}
}
pretty_out("Instead, I need your Course ID, which is the last",
"part of the web address for your Coursera course.",
"For example, if the homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).",
skip_after=TRUE)
}
courseid
}
pretty_out <- function(..., skip_before=TRUE, skip_after=FALSE) {
wrapped <- strwrap(str_c(..., sep = " "),
width = getOption("width") - 2)
mes <- str_c("| ", wrapped, collapse = "\n")
if(skip_before) mes <- paste0("\n", mes)
if(skip_after) mes <- paste0(mes, "\n")
message(mes)
}
checkPkgs <- function() {
pkg.inst <- installed.packages()
pkgs <- c("RCurl", "digest", "stringr")
have.pkg <- pkgs %in% rownames(pkg.inst)
if(any(!have.pkg)) {
message("\nSome packages need to be installed.\n")
r <- readline("Install necessary packages [y/n]? ")
if(tolower(r) == "y") {
need <- pkgs[!have.pkg]
message("\nInstalling packages ",
paste(need, collapse = ", "))
install.packages(need)
}
}
}
loginPrompt <- function() {
courseid <- get_courseid()
email <- readline("Submission login (email): ")
passwd <- readline("Submission  password: ")
r <- list(courseid = courseid, email = email, passwd = passwd)
assign(".CourseraLogin", r, globalenv())
invisible(r)
}
function(manual = FALSE, resetLogin = FALSE) {
checkPkgs()
suppressPackageStartupMessages(library(RCurl))
library(digest)
library(stringr)
readline("\nPress Enter to continue...")
if(!manual) {
confirmed <- FALSE
need2fix <- FALSE
while(!confirmed) {
if(exists(".CourseraLogin") && !resetLogin && !need2fix)
cred <- get(".CourseraLogin")
else
cred <- loginPrompt()
if(!is.list(cred) || !(names(cred) %in% c("email", "passwd", "courseid")))
stop("problem with login/password")
courseid <- cred$courseid
email <- cred$email
password <- cred$passwd
pretty_out("Is the following information correct?",
skip_after=TRUE)
message("Course ID: ", courseid,
"\nSubmission login (email): ", email,
"\nSubmission password: ", password)
yn <- c("Yes, go ahead!",
"No, I need to change something.")
confirmed <- identical(select.list(yn, graphics=FALSE), yn[1])
if(!confirmed) need2fix <- TRUE
}
## Set urls based on confirmed courseid
challenge.url <- paste("http://class.coursera.org", courseid,
"assignment/challenge", sep = "/")
submit.url <- paste("http://class.coursera.org", courseid,
"assignment/submit", sep = "/")
}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- try(getChallenge(email, challenge.url), silent=TRUE)
## Check if url is valid, i.e. challenge received
ch_ok <- !is(ch, "try-error") && exists("ch.key", ch) && !is.na(ch$ch.key)
if(!ch_ok) {
stop("Either the course ID you entered is not valid or your course site ",
"is unreachable at this time. If you'd like to submit manually, you ",
"can run submit(manual=TRUE).")
}
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state,
submit.url = submit.url)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
})
submit()
submit()
submit()
exit
exit
submit()
q()
install.package("test")
amostra1 = c(5,10)
amostra2 = c(15,20)
amostra1
amostra2
t.test(amostra1, amostra2, alternative = "tow.sided")
q()
unzip(zipfile="./data/Dataset.zip",exdir="./data")
pwd()
getwd()
unzip(zipfile="./data/Dataset.zip",exdir="./data")
unzip(zipfile="c:/R/Dataset.zip",exdir="./data")
unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE,
      junkpaths = FALSE, exdir = ".", unzip = "internal",
      setTimes = FALSE)
unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = "C:/R/data", unzip = "internal",setTimes= FALSE)
unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = "C:/R/data/UCI HAR Dataset.7z", unzip = "internal",setTimes= FALSE)
UCIHARDataset.7z
unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = "C:/R/data/UCIHARDataset.7z", unzip = "internal",setTimes= FALSE)
unzip(zipfile, exdir = "C:/R/data/UCIHARDataset.7z", unzip = "internal",setTimes= FALSE)
unzip(zipfile, exdir = "C:/R/data/UCIHARDataset.7z")
unzip(zipfile="./data/Dataset.zip",exdir="./data")
unzip(zipfile="./data/Dataset.zip",exdir="C:/R/data")
getwd()
unzip(zipfile="./data/Dataset.zip",exdir="C:/R/data")
unzip(zipfile="C:/R/data/Dataset.zip",exdir="C:/R/data")
unzip(zipfile="C:/R/data/Dataset.zip",exdir="./data")
pwd
getwd()
path_rr <- file.path("./data", "UCI HAR Dataset")
path_rf <- file.path("./data", "UCI HAR Dataset")
file <-list.files(path_rf, recursive=TRUE)
files
files <-list.files(path_rf, recursive=TRUE)
files
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine) 
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
str(Data)
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
head(Data$activity,30)
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
library(plyr)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
setRepositories()
utils:::menuInstallPkgs()
libray(plyr)
libray(plyr);
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
library(knitr)
knit2html("codebook.Rmd");
knit2html("codebook.Rmd");
libray(knitr)
libray(knitr);
library(knitr);
knithtml("codebook.Rmd");
knit2html("codebook.Rmd");
# Coursera Getting and Cleaning Data.
# Coursera Getting and Cleaning Data.
# Course Project 
# Prepare tools
if(require("downloader")){
  print("downloader is loaded correctly")
} else {
  print("trying to install downloader")
  install.packages("downloader")
  if(require(downloader)){
    print("downloader installed and loaded")
  } else {
    stop("could not install required packages (downloader)")
  }
}
if(require("data.table")){
  print("data.table is loaded correctly")
} else {
  print("trying to install data.table")
  install.packages("data.table")
  if(require(data.table)){
    print("data.table installed and loaded")
  } else {
    stop("could not install required packages (data.table)")
  }
}
print("To download data and prepare tidy data set, run download.data() and run.analysis()")
# Download dataset
download.data <- function(){
  url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
  file <- 'dataset.zip'
  download(url,file)
  unzip(file)
  print("Dataset downloaded. Please, proceed with run.analysis()")
}
# Loads and processes dataset of given type (train or test)
load.dataset <- function(type, selected.features, activity.labels){
  path <- paste(type, '/', sep = '')
  feature.vectors.file <- paste(path, 'X_', type, '.txt', sep = '')
  activity.labels.file <- paste(path, 'y_', type, '.txt', sep = '')
  subject.ids.file <- paste(path, 'subject_', type, '.txt', sep= '')
  # Load data files
  feature.vectors.data <- read.table(feature.vectors.file)[,selected.features$id]
  activity.labels.data <- read.table(activity.labels.file)[,1]
  subject.ids.data <- read.table(subject.ids.file)[,1]
  # Name variables 
  names(feature.vectors.data) <- selected.features$label
  feature.vectors.data$label <- factor(activity.labels.data, levels=activity.labels$id, labels=activity.labels$label)
  feature.vectors.data$subject <- factor(subject.ids.data)
  # Return processed dataset
  feature.vectors.data
}
run.analysis <- function(){
  setwd('UCI HAR Dataset/')
  # Load id->feature label data
  feature.vector.labels.data <- read.table('features.txt', col.names = c('id','label'))
  # Select only the measurements on the mean and standard deviation for each measurement.
  # Using grepl we can return logical vector of matching columns.
  # Features we want to select have -mean() or -std() as a part of the name.
  selected.features <- subset(feature.vector.labels.data, grepl('-(mean|std)\\(', feature.vector.labels.data$label))
  # Load id->activity label data
  activity.labels <- read.table('activity_labels.txt', col.names = c('id', 'label'))
  # Read train and test data sets
  print("Read and process training dataset")
  train.df <- load.dataset('train', selected.features, activity.labels)
  print("Read and process test dataset")
  test.df <- load.dataset('test', selected.features, activity.labels)
  # Merge train and test sets
  print("Merge train and test sets")
  merged.df <- rbind(train.df, test.df)
  print("Finished dataset loading and merging")
  # Convert to data.table for making it easier and faster 
  # to calculate mean for activity and subject groups.
  merged.dt <- data.table(merged.df)
  # Calculate the average of each variable for each activity and each subject. 
  tidy.dt <- merged.dt[, lapply(.SD, mean), by=list(label,subject)]
  # Tidy variable names
  tidy.dt.names <- names(tidy.dt)
  tidy.dt.names <- gsub('-mean', 'Mean', tidy.dt.names)
  tidy.dt.names <- gsub('-std', 'Std', tidy.dt.names)
  tidy.dt.names <- gsub('[()-]', '', tidy.dt.names)
  tidy.dt.names <- gsub('BodyBody', 'Body', tidy.dt.names)
  setnames(tidy.dt, tidy.dt.names)
  # Save datasets
  setwd('..')
  write.csv(merged.dt, file = 'uci-har-raw-data.csv', row.names = FALSE)
  write.csv(tidy.dt,
            file = 'uci-har-tidy-data.csv',
            row.names = FALSE, quote = FALSE)
  print("Finished processing. Tidy dataset is written to uci-har-tidy-data.csv")
}
library(knitr)
knit2html("codebook.Rmd")
Data2<-aggregate(. ~subject + activity, Data, mean) 
Data2<-Data2[order(Data2$subject,Data2$activity),] 
write.table(Data2, file = "tidydata.txt",row.name=FALSE) 
library(knitr);
knit2html("codebook.Rmd");
